# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:30:57+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    Attraction,
    AugmentationData,
    Entitlement,
    Event,
    ExtensionData,
    IngestionResult,
    Venue,
    Video,
)

app = MCPProxy(
    contact={'url': 'http://developer.ticketmaster.com/support/contact-us/'},
    description='Publish API',
    title='ticketmaster publish api',
    version='v2',
    servers=[{'url': '//www.ticketmaster.com/publish/v2'}],
)


@app.post(
    '/publish/v2/attractions',
    description=""" Since 1.0.0 """,
    tags=['attraction_publication'],
)
def publish_attraction(
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: Attraction = ...,
):
    """
    Publish an attractions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/publish/v2/attractions/{id}',
    description=""" Since 1.0.0 """,
    tags=['attraction_publication'],
)
def patch_attraction(
    id: str,
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: AugmentationData = ...,
):
    """
    Publish a patch on an attraction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/publish/v2/attractions/{id}/videos',
    description=""" Since 1.0.0 """,
    tags=['attraction_publication'],
)
def publish_attraction_videos(
    id: str,
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: Video = ...,
):
    """
    Publish a video on an attraction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/publish/v2/entitlements',
    description=""" Since 2.0.0 """,
    tags=['extension_publication'],
)
def publish_entitlements(
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: Entitlement = ...,
):
    """
    Publish entitlements on an entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/publish/v2/events', description=""" Since 1.0.0 """, tags=['event_publication']
)
def publish_event(
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: Event = ...,
):
    """
    Publish an event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/publish/v2/events/{id}',
    description=""" Since 1.0.0 """,
    tags=['event_publication', 'attraction_publication'],
)
def patch_event(
    id: str,
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: AugmentationData = ...,
):
    """
    Publish a patch on an event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/publish/v2/events/{id}/videos',
    description=""" Since 1.0.0 """,
    tags=['event_publication'],
)
def publish_event_videos(
    id: str,
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: Video = ...,
):
    """
    Publish a video on an event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/publish/v2/extensions',
    description=""" Since 1.0.0 """,
    tags=['extension_publication'],
)
def publish_extension(
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: ExtensionData = ...,
):
    """
    Publish extension on an entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/publish/v2/venues', description=""" Since 1.0.0 """, tags=['venue_publication']
)
def publish_venue(
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: Venue = ...,
):
    """
    Publish a venue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/publish/v2/venues/{id}',
    description=""" Since 1.0.0 """,
    tags=['venue_publication', 'attraction_publication'],
)
def patch_venue(
    id: str,
    t_m_p_s__correlation__id: str = Header(..., alias='TMPS-Correlation-Id'),
    body: AugmentationData = ...,
):
    """
    Publish a patch on a venue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
