# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:30:57+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr


class AccessDates(BaseModel):
    endApproximate: Optional[bool] = Field(
        False,
        description='Boolean flag to indicate whether or not the access end date is approximated',
        examples=['yyyy-MM-ddThh-mm-ssZ'],
    )
    endDateTime: Optional[datetime] = Field(
        None, description="Event's end access time", examples=['yyyy-MM-ddThh-mm-ssZ']
    )
    startApproximate: Optional[bool] = Field(
        False,
        description='Boolean flag to indicate whether or not the access start date is approximated',
    )
    startDateTime: Optional[datetime] = Field(
        None, description="Event's start access time", examples=['yyyy-MM-ddThh-mm-ssZ']
    )


class Address(BaseModel):
    line1s: Optional[Dict[str, str]] = Field(
        None,
        description='Aaddress first line - multi-lingual fields',
        examples=['en-us: line1'],
    )
    line2s: Optional[Dict[str, str]] = Field(
        None,
        description='Address second line - multi-lingual fields',
        examples=['en-us:line2'],
    )
    line3s: Optional[Dict[str, str]] = Field(
        None,
        description='Address third line - multi-lingual fields',
        examples=['en-us:line3'],
    )


class Area(BaseModel):
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )


class Type(Enum):
    event = 'event'
    venue = 'venue'
    attraction = 'attraction'


class AttractionExtensions(BaseModel):
    pass


class RelatedEntityType(Enum):
    event = 'event'
    attraction = 'attraction'
    venue = 'venue'


class Op(Enum):
    add = 'add'
    remove = 'remove'
    replace = 'replace'
    move = 'move'
    copy = 'copy'
    test = 'test'


class Change(BaseModel):
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Json path of the source entity when using the move operation.',
    )
    op: Op = Field(..., description='Operation to apply on the entity.')
    path: str = Field(
        ...,
        description='Json path from the root of the document to the place where the change should be applied.',
    )
    value: Optional[Dict[str, Any]] = Field(
        None, description='Data to change. MUST be a valid json object.'
    )


class City(BaseModel):
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )


class Country(BaseModel):
    countryCode: Optional[str] = Field(None, description='Country code (ISO 3166)')
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )


class DateTimeZone(BaseModel):
    fixed: Optional[bool] = False
    id: Optional[str] = None


class DisplaySettingExtension(BaseModel):
    pass


class Dma(BaseModel):
    id: Optional[int] = Field(None, description="DMS's id")


class DurationFieldType(BaseModel):
    name: Optional[str] = None


class RelatedEntityType1(Enum):
    event = 'event'
    venue = 'venue'
    attraction = 'attraction'


class Source1(Enum):
    ticketmaster = 'ticketmaster'


class EntityChanges(BaseModel):
    changes: Optional[List[str]] = None
    newlyCreated: Optional[bool] = False


class EventExtensions(BaseModel):
    pass


class Code(Enum):
    onsale = 'onsale'
    offsale = 'offsale'
    canceled = 'canceled'
    postponed = 'postponed'
    rescheduled = 'rescheduled'


class EventStatus(BaseModel):
    code: Optional[Code] = Field(None, description="The event's status code")


class Extension(BaseModel):
    pass


class GeolocationVenueExtensions(BaseModel):
    pass


class HostExtension(BaseModel):
    pass


class Ratio(Enum):
    field_16_9 = '16_9'
    field_3_2 = '3_2'
    field_4_3 = '4_3'


class Image(BaseModel):
    attribution: Optional[str] = Field(None, description='Attribution of the image')
    domains: Optional[List[str]] = Field(
        None, description='Domains on which this image should be displayed'
    )
    fallback: Optional[bool] = Field(
        False,
        description="true if the image is not the event's image but a fallbak image",
    )
    height: Optional[int] = Field(None, description='Height of the image')
    ratio: Optional[Ratio] = Field(None, description='Aspect ratio of the image')
    url: Optional[str] = Field(None, description='Public URL of the image')
    width: Optional[int] = Field(None, description='Width of the image')


class Status(Enum):
    Error = 'Error'
    SuccessWarning = 'SuccessWarning'
    Success = 'Success'


class IngestionResult(BaseModel):
    id: Optional[str] = Field(
        None, description='Id of the entity ingested in the discovery api'
    )
    ignoredProperties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, description='List properties that are ignored in the validation'
    )
    invalidProperties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, description='List of invalid properties'
    )
    invalidValues: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, description='List of invalid values'
    )
    missingProperties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None,
        description='List of properties that should be present in your entity to ease its dicovery',
    )
    status: Status = Field(..., description='Status of the result')
    unknownProperties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, description='List of unknown properties that will be dropped'
    )


class Level(BaseModel):
    id: Optional[str] = Field(None, description="The ID of the classification's level")
    names: Optional[Dict[str, str]] = Field(
        None,
        description="The Name of the classification's level - multi-lingual fields",
    )


class Locale(BaseModel):
    country: Optional[str] = None
    displayCountry: Optional[str] = None
    displayLanguage: Optional[str] = None
    displayName: Optional[str] = None
    displayScript: Optional[str] = None
    displayVariant: Optional[str] = None
    extensionKeys: Optional[List[str]] = None
    iso3Country: Optional[str] = None
    iso3Language: Optional[str] = None
    language: Optional[str] = None
    script: Optional[str] = None
    unicodeLocaleAttributes: Optional[List[str]] = None
    unicodeLocaleKeys: Optional[List[str]] = None
    variant: Optional[str] = None


class Location(BaseModel):
    latitude: Optional[float] = Field(None, description='Latitude')
    longitude: Optional[float] = Field(None, description='Longitude')


class Market(BaseModel):
    id: Optional[str] = Field(None, description="Market's id")


class Parking(BaseModel):
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )
    url: Optional[str] = Field(None, description='Url to the web page of the parking')


class Presale(BaseModel):
    descriptions: Optional[Dict[str, str]] = Field(
        None,
        description='Description of the presale - multi-lingual fields',
        examples=['en-us: description'],
    )
    endDateTime: Optional[datetime] = Field(
        None,
        description="Presale's end dates. The date and time when the presale will end",
    )
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Name of the presale - multi-lingual fields',
        examples=['en-us: name'],
    )
    startDateTime: Optional[datetime] = Field(
        None,
        description="Presale's start dates. The date and time when the presale will start",
    )
    url: Optional[str] = Field(None, description='Presale link URL')


class Type2(Enum):
    standard = 'standard'


class PriceRange(BaseModel):
    currency: Optional[str] = Field(None, description='Currency')
    max: Optional[float] = Field(None, description='Maximum price')
    min: Optional[float] = Field(None, description='Minimum price')
    type: Optional[Type2] = Field(None, description='Type of price')


class Promoter(BaseModel):
    descriptions: Optional[Dict[str, str]] = Field(
        None,
        description='Description of the promoter - multi-lingual fields',
        examples=['en-us: description'],
    )
    id: Optional[str] = Field(None, description='Id of the promoter')
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Name of the promoter - multi-lingual fields',
        examples=['en-us: name'],
    )


class PublicSaleDates(BaseModel):
    endDateTime: Optional[datetime] = Field(
        None,
        description="Public sale's end dates. The date and time when the public sale will end",
    )
    startDateTime: Optional[datetime] = Field(
        None,
        description="Public sale's start dates. The date and time when the public sale will start",
    )
    startTBD: Optional[bool] = Field(
        False, description="True if the public sale's date is to be determined"
    )


class PublicVisibility(BaseModel):
    endDateTime: Optional[datetime] = Field(
        None,
        description='The end of the public visibility. The date and time when the event will be public visible',
    )
    startDateTime: Optional[datetime] = Field(
        None,
        description='The start of the public visibility. The date and time when the event will be public visible',
    )
    visible: Optional[bool] = Field(
        False,
        description='True if you want to have the event visible in the discovery API',
    )


class RegionRestrictions(BaseModel):
    allowed: Optional[List[str]] = Field(
        None, description='Restrictions based on regions'
    )


class Relationship(BaseModel):
    pass


class Segment(BaseModel):
    id: Optional[str] = Field(None, description="The ID of the classification's level")
    names: Optional[Dict[str, str]] = Field(
        None,
        description="The Name of the classification's level - multi-lingual fields",
    )


class Source(BaseModel):
    id: Optional[constr(pattern=r'^[a-zA-Z0-9_-]*$')] = Field(
        None, description="ID of the entity in the source's system"
    )
    name: Optional[constr(pattern=r'^[a-zA-Z0-9_-]*$')] = Field(
        None, description="Source's name"
    )


class State(BaseModel):
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )
    stateCode: Optional[str] = Field(None, description='State code')


class TatExtension(BaseModel):
    pass


class TicketmasterAttractionExtensions(BaseModel):
    pass


class TicketmasterEventExtensions(BaseModel):
    pass


class TicketmasterVenueExtensions(BaseModel):
    pass


class Handle(Enum):
    field_a_Twitter_handle = '@a Twitter handle'


class Twitter(BaseModel):
    handle: Optional[Handle] = Field(
        None, description='Twitter handle', examples=['@a Twitter handle exampe']
    )
    hashtags: Optional[List[str]] = Field(
        None,
        description='Twitter hashtags',
        examples=['#hashtag example #hashtag another example'],
    )


class Type3(Enum):
    event = 'event'
    venue = 'venue'
    attraction = 'attraction'


class VenueBoxOfficeInfo(BaseModel):
    acceptedPaymentDetails: Optional[Dict[str, str]] = Field(
        None,
        description='Venue box office accepted payment details - multi-lingual fields',
        examples=['en-us:paymentDetails'],
    )
    openHoursDetails: Optional[Dict[str, str]] = Field(
        None,
        description='Venue box office opening hours - multi-lingual fields',
        examples=['en-us:openHours'],
    )
    phoneNumberDetails: Optional[Dict[str, str]] = Field(
        None,
        description='Venue box office phone number - multi-lingual fields',
        examples=['en-us:phoneNumbers'],
    )
    willCallDetails: Optional[Dict[str, str]] = Field(
        None,
        description='Venue box office will call details - multi-lingual fields',
        examples=['en-us:willCall'],
    )


class VenueExtensions(BaseModel):
    pass


class VenueGeneralInfo(BaseModel):
    childRules: Optional[Dict[str, str]] = Field(
        None,
        description='Venue children rules - multi-lingual fields',
        examples=['en-us: rule'],
    )
    generalRules: Optional[Dict[str, str]] = Field(
        None,
        description='Venue general rules - multi-lingual fields',
        examples=['en-us: rule'],
    )


class AugmentationData(BaseModel):
    changes: List[Change] = Field(
        ..., description='List of changes to apply to the related entity'
    )
    relatedEntityId: str = Field(
        ..., description='Id of the entity to apply the augmentation data.'
    )
    relatedEntityType: RelatedEntityType = Field(
        ..., description='The type of the entity to apply the augmentation data.'
    )
    score: Optional[float] = Field(
        None,
        description='The confidence (%) level of the accuracy of this augmention data. 100 is the better',
    )
    source: str = Field(
        ..., description='The source where the augementation data came from'
    )
    versionNumber: int = Field(
        ...,
        description='Vesion of this augmentation data. This field is to avoid updating entity with old data. ',
    )


class Chronology(BaseModel):
    zone: Optional[DateTimeZone] = None


class Classification(BaseModel):
    genre: Optional[Level] = None
    primary: Optional[bool] = False
    segment: Optional[Segment] = None
    subGenre: Optional[Level] = None
    subType: Optional[Level] = None
    type: Optional[Level] = None


class DateTimeFieldType(BaseModel):
    durationType: Optional[DurationFieldType] = None
    name: Optional[str] = None
    rangeDurationType: Optional[DurationFieldType] = None


class DurationField(BaseModel):
    name: Optional[str] = None
    precise: Optional[bool] = False
    supported: Optional[bool] = False
    type: Optional[DurationFieldType] = None
    unitMillis: Optional[int] = None


class Entitlement(BaseModel):
    data: Dict[str, Any] = Field(
        ..., description='The actual entitlements information to add to the entity'
    )
    relatedEntityId: Optional[str] = Field(
        None,
        description='Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided',
    )
    relatedEntitySource: Optional[Source] = None
    relatedEntityType: RelatedEntityType1 = Field(
        ..., description='The type of the entity to add this entitlement to'
    )
    source: Source1 = Field(
        ..., description='Source of the extension, where it came from'
    )
    versionNumber: Optional[int] = Field(
        None,
        description='Version of the entitlements. Version is to prevent to override an entitlements with an older one',
    )


class EventSalesDates(BaseModel):
    presales: Optional[List[Presale]] = Field(
        None, description='Presale information on this event'
    )
    public: Optional[PublicSaleDates] = None


class ExtensionData(BaseModel):
    data: Dict[str, Any] = Field(
        ..., description='The actual information to add to the entity'
    )
    relatedEntityId: Optional[str] = Field(
        None,
        description='Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided',
    )
    relatedEntitySource: Optional[Source] = None
    relatedEntityType: RelatedEntityType1 = Field(
        ..., description='The type of the entity to add this extensions to'
    )
    source: str = Field(..., description='Source of the extension, where it came from')
    type: str = Field(
        ..., description='The type of the extension. This represent the data sent'
    )
    versionNumber: Optional[int] = Field(
        None,
        description='Version of the extensions. Version is to prevent to override an extension with an older one',
    )


class Geometry(BaseModel):
    location: Optional[Location] = None


class LicensingInformation(BaseModel):
    license: str = Field(..., description='License name')
    regionRestriction: Optional[RegionRestrictions] = None


class Place(BaseModel):
    address: Optional[Address] = None
    area: Optional[Area] = None
    city: Optional[City] = None
    country: Optional[Country] = None
    location: Optional[Location] = None
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )
    postalCode: Optional[str] = Field(
        None, description='Postal code / zipcode of the place'
    )
    state: Optional[State] = None


class Social(BaseModel):
    twitter: Optional[Twitter] = None


class Venue(BaseModel):
    accessibleSeatingDetails: Optional[Dict[str, str]] = Field(
        None,
        description='Venue accessible seating details - multi-lingual fields',
        examples=['en-us:seatingDetails'],
    )
    active: Optional[bool] = Field(
        False,
        description="Indicate if the entity is active, inactive entity won't appear in Discovery API",
    )
    additionalInfos: Optional[Dict[str, str]] = Field(
        None,
        description='Additional informations of the entity - multi-lingual fields',
        examples=['en-us: additionalInfo'],
    )
    address: Optional[Address] = None
    boxOfficeInfo: Optional[VenueBoxOfficeInfo] = None
    city: Optional[City] = None
    country: Optional[Country] = None
    currency: Optional[str] = Field(
        None, description='Default currency of ticket prices for events in this venue'
    )
    descriptions: Optional[Dict[str, str]] = Field(
        None,
        description='Descriptions of the entity - multi-lingual fields',
        examples=['en-us: description'],
    )
    discoverable: Optional[bool] = Field(
        False, description='True if the entity is dicoverable in discovery API'
    )
    distance: Optional[float] = None
    dma: Optional[List[Dma]] = Field(
        None,
        description='The list of associated DMAs (Designated Market Areas) of the venue',
    )
    generalInfo: Optional[VenueGeneralInfo] = None
    images: Optional[List[Image]] = Field(None, description='Images of the entity')
    location: Optional[Location] = None
    markets: Optional[List[Market]] = Field(None, description='Markets of the venue')
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )
    parkingDetails: Optional[Dict[str, str]] = Field(
        None,
        description='Venue parking info - multi-lingual fields',
        examples=['en-us:parkingDetails'],
    )
    postalCode: Optional[str] = Field(
        None, description='Postal code / zipcode of the venue'
    )
    references: Optional[Dict[str, str]] = Field(
        None,
        description='References of this entity in an other system. Reference is the exact same entity',
        examples=['sourceName: id'],
    )
    relationships: Optional[List[Relationship]] = Field(
        None,
        description='Relationships on the entity, like if the entity is a duplicate of another one',
    )
    social: Optional[Social] = None
    source: Optional[Source] = None
    state: Optional[State] = None
    test: Optional[bool] = Field(
        False,
        description="Indicate if this is a test entity, by default test entities won't appear in discovery API",
    )
    timezone: Optional[str] = Field(None, description='Timezone of the venue')
    type: Type3 = Field(..., description='Type of the entity')
    units: Optional[str] = None
    url: Optional[str] = Field(
        None, description='URL of a web site detail page of the entity'
    )
    version: Optional[int] = Field(
        None,
        description='Version of the entity. Version is to avoid updated an entity with an older version',
    )


class Video(BaseModel):
    embedUrl: Optional[str] = Field(None, description='The url of the embeded video')
    licensingInformation: LicensingInformation
    source: Source
    url: str = Field(..., description='The url of the video')


class Attraction(BaseModel):
    active: Optional[bool] = Field(
        False,
        description="Indicate if the entity is active, inactive entity won't appear in Discovery API",
    )
    additionalInfos: Optional[Dict[str, str]] = Field(
        None,
        description='Additional informations of the entity - multi-lingual fields',
        examples=['en-us: additionalInfo'],
    )
    classifications: Optional[List[Classification]] = Field(
        None, description="Attraction's classifications"
    )
    descriptions: Optional[Dict[str, str]] = Field(
        None,
        description='Descriptions of the entity - multi-lingual fields',
        examples=['en-us: description'],
    )
    discoverable: Optional[bool] = Field(
        False, description='True if the entity is dicoverable in discovery API'
    )
    images: Optional[List[Image]] = Field(None, description='Images of the entity')
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )
    references: Optional[Dict[str, str]] = Field(
        None,
        description='References of this entity in an other system. Reference is the exact same entity',
        examples=['sourceName: id'],
    )
    relationships: Optional[List[Relationship]] = Field(
        None,
        description='Relationships on the entity, like if the entity is a duplicate of another one',
    )
    source: Optional[Source] = None
    test: Optional[bool] = Field(
        False,
        description="Indicate if this is a test entity, by default test entities won't appear in discovery API",
    )
    type: Type = Field(..., description='Type of the entity')
    url: Optional[str] = Field(
        None, description='URL of a web site detail page of the entity'
    )
    version: Optional[int] = Field(
        None,
        description='Version of the entity. Version is to avoid updated an entity with an older version',
    )


class DateTimeField(BaseModel):
    durationField: Optional[DurationField] = None
    leapDurationField: Optional[DurationField] = None
    lenient: Optional[bool] = False
    maximumValue: Optional[int] = None
    minimumValue: Optional[int] = None
    name: Optional[str] = None
    rangeDurationField: Optional[DurationField] = None
    supported: Optional[bool] = False
    type: Optional[DateTimeFieldType] = None


class GeocodeExtension(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    county: Optional[str] = None
    formattedAddress: Optional[str] = None
    geometry: Optional[Geometry] = None
    postalCode: Optional[str] = None
    route: Optional[str] = None
    state: Optional[str] = None
    streetNumber: Optional[str] = None


class LocalTime(BaseModel):
    chronology: Optional[Chronology] = None
    fieldTypes: Optional[List[DateTimeFieldType]] = None
    fields: Optional[List[DateTimeField]] = None
    hourOfDay: Optional[int] = None
    millisOfDay: Optional[int] = None
    millisOfSecond: Optional[int] = None
    minuteOfHour: Optional[int] = None
    secondOfMinute: Optional[int] = None
    values: Optional[List[int]] = None


class StartDates(BaseModel):
    dateTBA: Optional[bool] = Field(
        False,
        description='Boolean flag to indicate whether or not the start date is TBA',
    )
    dateTBD: Optional[bool] = Field(
        False,
        description='Boolean flag to indicate whether or not the start date is TBD',
    )
    dateTime: Optional[datetime] = Field(
        None, description='The event start datetime', examples=['yyyy-MM-ddThh:mm:ssZ']
    )
    localDate: Optional[date] = Field(
        None, description='The event start date in local date', examples=['yyyy-MM-dd']
    )
    localTime: Optional[LocalTime] = None
    noSpecificTime: Optional[bool] = Field(
        False,
        description='Boolean flag to indicate whether or not the event has no specific time',
    )
    timeTBA: Optional[bool] = Field(
        False,
        description='Boolean flag to indicate whether or not the start time is TBA',
    )


class EndDates(BaseModel):
    approximate: Optional[bool] = Field(
        False,
        description='Boolean flag to indicate whether or not the end date is approximated',
    )
    dateTime: Optional[datetime] = Field(
        None, description='The event end date time', examples=['yyyy-MM-ddThh-mm-ssZ']
    )
    localTime: Optional[LocalTime] = None


class EventDates(BaseModel):
    access: Optional[AccessDates] = None
    end: Optional[EndDates] = None
    start: Optional[StartDates] = None
    status: Optional[EventStatus] = None
    timezone: Optional[str] = Field(None, description="Event's timezone")


class Event(BaseModel):
    active: Optional[bool] = Field(
        False,
        description="Indicate if the entity is active, inactive entity won't appear in Discovery API",
    )
    additionalInfos: Optional[Dict[str, str]] = Field(
        None,
        description='Additional informations of the entity - multi-lingual fields',
        examples=['en-us: additionalInfo'],
    )
    attractions: Optional[List[Attraction]] = Field(
        None, description='Ordered Attraction related to the event'
    )
    classifications: Optional[List[Classification]] = Field(
        None, description="Event's classifications"
    )
    dates: Optional[EventDates] = None
    descriptions: Optional[Dict[str, str]] = Field(
        None,
        description='Descriptions of the entity - multi-lingual fields',
        examples=['en-us: description'],
    )
    discoverable: Optional[bool] = Field(
        False, description='True if the entity is dicoverable in discovery API'
    )
    distance: Optional[float] = None
    images: Optional[List[Image]] = Field(None, description='Images of the entity')
    infos: Optional[Dict[str, str]] = Field(
        None,
        description='Any information related to the event - multi-lingual fields',
        examples=['en-us: info'],
    )
    location: Optional[Location] = None
    names: Optional[Dict[str, str]] = Field(
        None,
        description='Names of the entity - multi-lingual fields',
        examples=['en-us: name'],
    )
    place: Optional[Place] = None
    pleaseNotes: Optional[Dict[str, str]] = Field(
        None,
        description='Any notes related to the event - multi-lingual fields',
        examples=['en-us: note'],
    )
    priceRanges: Optional[List[PriceRange]] = Field(
        None, description='Price ranges of this event'
    )
    promoter: Optional[Promoter] = None
    publicVisibility: Optional[PublicVisibility] = None
    references: Optional[Dict[str, str]] = Field(
        None,
        description='References of this entity in an other system. Reference is the exact same entity',
        examples=['sourceName: id'],
    )
    relationships: Optional[List[Relationship]] = Field(
        None,
        description='Relationships on the entity, like if the entity is a duplicate of another one',
    )
    sales: Optional[EventSalesDates] = None
    source: Optional[Source] = None
    test: Optional[bool] = Field(
        False,
        description="Indicate if this is a test entity, by default test entities won't appear in discovery API",
    )
    type: Type = Field(..., description='Type of the entity')
    units: Optional[str] = None
    url: Optional[str] = Field(
        None, description='URL of a web site detail page of the entity'
    )
    venue: Optional[Venue] = None
    version: Optional[int] = Field(
        None,
        description='Version of the entity. Version is to avoid updated an entity with an older version',
    )
